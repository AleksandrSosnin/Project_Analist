# -*- coding: utf-8 -*-
"""Home_Work1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OJcHbnP0Odrvz7oxM9mjLuGqN5iyoFc2
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import norm, shapiro, ttest_ind
from statsmodels.stats.power import TTestIndPower

uploaded = files.upload()

print(uploaded.keys())

df = pd.read_csv(io.BytesIO(uploaded['ab_stats (3).csv']))
print(df)

sns.set(style="whitegrid")

# Параметры задачи
baseline_conversion = 0.05   # Текущая конверсия
expected_increase = 0.002    # Ожидаемый прирост конверсии
alpha = 0.03                 # Уровень доверия (3% для доверительного уровня 97%)
power = 0.87                 # Уровень мощности
monthly_visitors = 40000     # Ежемесячное количество посетителей

# 2) Расчет размера выборки для A/B теста
effect_size = expected_increase / baseline_conversion  # Размер эффекта
analysis = TTestIndPower()
sample_size = analysis.solve_power(effect_size=effect_size, alpha=alpha, power=power, alternative='larger')
sample_size = int(np.ceil(sample_size))  # Округление до целого

print(f"Необходимый размер выборки для A/B теста: {sample_size} пользователей на каждую группу")

# Визуализация 1: Накопительное количество пользователей и достижение значимости
days = np.arange(1, 31)
daily_visitors = monthly_visitors / 30  # Среднее количество пользователей в день
cumulative_users = daily_visitors * days  # Накопленное количество пользователей за каждый день

plt.figure(figsize=(10, 6))
plt.plot(days, cumulative_users, color="coral", marker='o', label="Накопленное количество пользователей")
plt.axhline(sample_size * 2, color="blue", linestyle="--", label="Требуемый размер выборки")
plt.title("Накопление пользователей для достижения значимости теста")
plt.xlabel("Дни")
plt.ylabel("Накопительное количество пользователей")
plt.legend()
plt.show()

# 3) Подсчет времени для достижения значимости теста
days_to_significance = (sample_size * 2) / daily_visitors  # Делим на пользователей в день
print(f"Необходимое количество дней для теста: {np.ceil(days_to_significance)} дней")

# 3.1) Результаты тестирования при различных конверсиях
conversions = [25000, 30000, 32000]
for i, conv in enumerate(conversions, start=1):
    lift = (conv / sample_size) - baseline_conversion
    print(f"Конверсия для варианта {i}: {conv/sample_size*100:.2f}%, прирост конверсии: {lift*100:.2f}%")

# Визуализация 3: Конверсии по источникам трафика
plt.figure(figsize=(8, 6))
traffic_sources = ['Source 1', 'Source 2', 'Source 3']
sns.barplot(x=traffic_sources, y=conversions, palette="Blues_d", hue=traffic_sources)
plt.title("Конверсии по источникам трафика")
plt.xlabel("Источник трафика")
plt.ylabel("Количество конверсий")
plt.show()

# 4) Проверка нормальности CPA с критерием Шапиро-Уилка
sample_size_cpa = 2350  # Размер выборки для CPA
alpha_cpa = 0.05
cpa_values = np.random.normal(200, 50, sample_size_cpa)  # Генерация данных CPA

stat, p_value = shapiro(cpa_values)
print(f"Тест Шапиро-Уилка для CPA: p-value = {p_value}")
if p_value < alpha_cpa:
    print("Распределение CPA не является нормальным.")
else:
    print("Распределение CPA является нормальным.")

# Визуализация 4: Распределение CPA
plt.figure(figsize=(8, 6))
sns.histplot(cpa_values, bins=30, kde=True, color="purple")
plt.title("Распределение метрики CPA")
plt.xlabel("CPA")
plt.ylabel("Частота")
plt.show()

# 5) Проверка значимости среднего времени на сайте между группами A и B
mean_a, std_a, n_a = 360, 40, 9802
mean_b, std_b, n_b = 352, 58, 9789

# Сравнение средних с t-тестом
t_stat, p_value_ab = ttest_ind(np.random.normal(mean_a, std_a, n_a), np.random.normal(mean_b, std_b, n_b), equal_var=False)
print(f"Результаты t-теста для времени на сайте: p-value = {p_value_ab}")
if p_value_ab < 0.2:
    print("Различие во времени на сайте является статистически значимым.")
else:
    print("Различие во времени на сайте не является статистически значимым.")

# Визуализация 5: Сравнение времени на сайте (A/B)
average_timespent_A = np.random.normal(mean_a, std_a, n_a)
average_timespent_B = np.random.normal(mean_b, std_b, n_b)
timespent_data = pd.DataFrame({
    "Время на сайте (сек)": np.concatenate([average_timespent_A, average_timespent_B]),
    "Группа": ['A'] * n_a + ['B'] * n_b
})

plt.figure(figsize=(8, 6))
sns.boxplot(x="Группа", y="Время на сайте (сек)", data=timespent_data, palette="Set2")
plt.title("Сравнение времени на сайте (A/B)")
plt.xlabel("Группа")
plt.ylabel("Время на сайте (сек)")
plt.show()